package com.WangXinchi.healthservice;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Scanner;


public class HealthServiceAppointmentSystem {
    private static List<Appointment> appointments = new ArrayList<>();
    // 创建相应的医生人数
    private static final HealthProfessional gp1 = new GeneralPractitioner(1, "Dr. Smith", "General Practitioner");
    private static final HealthProfessional gp2 = new GeneralPractitioner(2, "Dr. Doe", "General Practitioner");
    private static final HealthProfessional gp3 = new GeneralPractitioner(3, "Dr. Adams", "General Practitioner");
    private static final HealthProfessional specialist1 = new Specialist(4, "Dr. Jones", "Specialist in Cardiology");
    private static final HealthProfessional specialist2 = new Specialist(5, "Dr. Johnson", "Specialist in Neurology");

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Add Appointment");
            System.out.println("2. Cancel Appointment");
            System.out.println("3. Show Appointments");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addAppointment(scanner);
                    break;
                case 2:
                    cancelAppointment(scanner);
                    break;
                case 3:
                    showAppointments();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void addAppointment(Scanner scanner) {
        System.out.print("Enter patient name: ");
        String patientName = scanner.nextLine();
        System.out.print("Enter patient mobile: "); // 添加输入电话号码
        String patientMobile = scanner.nextLine();
        System.out.print("Enter preferred time (HH:mm): ");
        String time = scanner.nextLine();
        System.out.print("Enter doctor ID (1-3 for GP, 4-5 for Specialist): ");
        int doctorId = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        HealthProfessional selectedDoctor = null;
        switch (doctorId) {
            case 1:
                selectedDoctor = gp1;
                break;
            case 2:
                selectedDoctor = gp2;
                break;
            case 3:
                selectedDoctor = gp3;
                break;
            case 4:
                selectedDoctor = specialist1;
                break;
            case 5:
                selectedDoctor = specialist2;
                break;
            default:
                System.out.println("Invalid doctor ID.");
                return;
        }

        try {
            Calendar calendar = Calendar.getInstance();
            calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time.split(":")[0]));
            calendar.set(Calendar.MINUTE, Integer.parseInt(time.split(":")[1]));
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);
            appointments.add(new Appointment(patientName, patientMobile, calendar.getTime(), selectedDoctor));
            System.out.println("Appointment added successfully.");
        } catch (NumberFormatException e) {
            System.out.println("Invalid time format. Please use HH:mm.");
        }
    }

    private static void cancelAppointment(Scanner scanner) {
        System.out.print("Enter patient name to cancel: ");
        String patientName = scanner.nextLine();
        boolean removed = false;
        for (int i = 0; i < appointments.size(); i++) {
            if (patientName.equals(appointments.get(i).getPatientName())) {
                appointments.remove(i);
                removed = true;
                break; // 退出循环，因为我们已经找到了并移除了预约
            }
        }
        if (removed) {
            System.out.println("Appointment cancelled successfully.");
        } else {
            System.out.println("No appointment found with that patient name.");
        }
    }

    private static void showAppointments() {
        if (appointments.isEmpty()) {
            System.out.println("No appointments available.");
        } else {
            for (Appointment appointment : appointments) {
                System.out.println(appointment);
            }
        }
    }
}
